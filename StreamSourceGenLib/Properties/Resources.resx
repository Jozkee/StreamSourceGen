<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="TaskToApm" xml:space="preserve">
    <value>// &lt;auto-generated/&gt;

// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.

// Helper methods for using Tasks to implement the APM pattern.
//
// Example usage, wrapping a Task&lt;int&gt;-returning FooAsync method with Begin/EndFoo methods:
//
//     public IAsyncResult BeginFoo(..., AsyncCallback? callback, object? state) =&gt;
//         TaskToApm.Begin(FooAsync(...), callback, state);
//
//     public int EndFoo(IAsyncResult asyncResult) =&gt;
//         TaskToApm.End&lt;int&gt;(asyncResult);

#nullable enable

using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;

namespace System.Threading.Tasks
{
    /// &lt;summary&gt;
    /// Provides support for efficiently using Tasks to implement the APM (Begin/End) pattern.
    /// &lt;/summary&gt;
    internal static class TaskToApm
    {
        /// &lt;summary&gt;
        /// Marshals the Task as an IAsyncResult, using the supplied callback and state
        /// to implement the APM pattern.
        /// &lt;/summary&gt;
        /// &lt;param name="task"&gt;The Task to be marshaled.&lt;/param&gt;
        /// &lt;param name="callback"&gt;The callback to be invoked upon completion.&lt;/param&gt;
        /// &lt;param name="state"&gt;The state to be stored in the IAsyncResult.&lt;/param&gt;
        /// &lt;returns&gt;An IAsyncResult to represent the task's asynchronous operation.&lt;/returns&gt;
        public static IAsyncResult Begin(Task task, AsyncCallback? callback, object? state) =&gt;
            new TaskAsyncResult(task, state, callback);

        /// &lt;summary&gt;Processes an IAsyncResult returned by Begin.&lt;/summary&gt;
        /// &lt;param name="asyncResult"&gt;The IAsyncResult to unwrap.&lt;/param&gt;
        public static void End(IAsyncResult asyncResult)
        {
            if (GetTask(asyncResult) is Task t)
            {
                t.GetAwaiter().GetResult();
                return;
            }

            ThrowArgumentException(asyncResult);
        }

        /// &lt;summary&gt;Processes an IAsyncResult returned by Begin.&lt;/summary&gt;
        /// &lt;param name="asyncResult"&gt;The IAsyncResult to unwrap.&lt;/param&gt;
        public static TResult End&lt;TResult&gt;(IAsyncResult asyncResult)
        {
            if (GetTask(asyncResult) is Task&lt;TResult&gt; task)
            {
                return task.GetAwaiter().GetResult();
            }

            ThrowArgumentException(asyncResult);
            return default!; // unreachable
        }

        /// &lt;summary&gt;Gets the task represented by the IAsyncResult.&lt;/summary&gt;
        public static Task? GetTask(IAsyncResult asyncResult) =&gt; (asyncResult as TaskAsyncResult)?._task;

        /// &lt;summary&gt;Throws an argument exception for the invalid &lt;paramref name="asyncResult"/&gt;.&lt;/summary&gt;
        //[DoesNotReturn]
        private static void ThrowArgumentException(IAsyncResult asyncResult)
        {
            throw asyncResult is null ?
                new ArgumentNullException(nameof(asyncResult)) :
                new ArgumentException(null, nameof(asyncResult));
        }

        /// &lt;summary&gt;Provides a simple IAsyncResult that wraps a Task.&lt;/summary&gt;
        /// &lt;remarks&gt;
        /// We could use the Task as the IAsyncResult if the Task's AsyncState is the same as the object state,
        /// but that's very rare, in particular in a situation where someone cares about allocation, and always
        /// using TaskAsyncResult simplifies things and enables additional optimizations.
        /// &lt;/remarks&gt;
        internal sealed class TaskAsyncResult : IAsyncResult
        {
            /// &lt;summary&gt;The wrapped Task.&lt;/summary&gt;
            internal readonly Task _task;
            /// &lt;summary&gt;Callback to invoke when the wrapped task completes.&lt;/summary&gt;
            private readonly AsyncCallback? _callback;

            /// &lt;summary&gt;Initializes the IAsyncResult with the Task to wrap and the associated object state.&lt;/summary&gt;
            /// &lt;param name="task"&gt;The Task to wrap.&lt;/param&gt;
            /// &lt;param name="state"&gt;The new AsyncState value.&lt;/param&gt;
            /// &lt;param name="callback"&gt;Callback to invoke when the wrapped task completes.&lt;/param&gt;
            internal TaskAsyncResult(Task task, object? state, AsyncCallback? callback)
            {
                Debug.Assert(task != null);
                _task = task;
                AsyncState = state;

                if (task.IsCompleted)
                {
                    // Synchronous completion.  Invoke the callback.  No need to store it.
                    CompletedSynchronously = true;
                    callback?.Invoke(this);
                }
                else if (callback != null)
                {
                    // Asynchronous completion, and we have a callback; schedule it. We use OnCompleted rather than ContinueWith in
                    // order to avoid running synchronously if the task has already completed by the time we get here but still run
                    // synchronously as part of the task's completion if the task completes after (the more common case).
                    _callback = callback;
                    _task.ConfigureAwait(continueOnCapturedContext: false)
                         .GetAwaiter()
                         .OnCompleted(InvokeCallback); // allocates a delegate, but avoids a closure
                }
            }

            /// &lt;summary&gt;Invokes the callback.&lt;/summary&gt;
            private void InvokeCallback()
            {
                Debug.Assert(!CompletedSynchronously);
                Debug.Assert(_callback != null);
                _callback.Invoke(this);
            }

            /// &lt;summary&gt;Gets a user-defined object that qualifies or contains information about an asynchronous operation.&lt;/summary&gt;
            public object? AsyncState { get; }
            /// &lt;summary&gt;Gets a value that indicates whether the asynchronous operation completed synchronously.&lt;/summary&gt;
            /// &lt;remarks&gt;This is set lazily based on whether the &lt;see cref="_task"/&gt; has completed by the time this object is created.&lt;/remarks&gt;
            public bool CompletedSynchronously { get; }
            /// &lt;summary&gt;Gets a value that indicates whether the asynchronous operation has completed.&lt;/summary&gt;
            public bool IsCompleted =&gt; _task.IsCompleted;
            /// &lt;summary&gt;Gets a &lt;see cref="WaitHandle"/&gt; that is used to wait for an asynchronous operation to complete.&lt;/summary&gt;
            public WaitHandle AsyncWaitHandle =&gt; ((IAsyncResult)_task).AsyncWaitHandle;
        }
    }
}</value>
  </data>
</root>